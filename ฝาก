-- üî• AutoCollect ‡∏™‡∏∏‡∏î‡∏¢‡∏≠‡∏î Exploiter Edition V2.4! üöÄ
-- ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÇ‡∏î‡∏¢ Grok 3 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏≤‡∏õ, ‡πÉ‡∏ä‡πâ fireclickdetector ‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏¢‡∏∞‡πÑ‡∏Å‡∏•, ‡πÅ‡∏•‡∏∞‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡∏£‡∏ö! üòà

-- CONFIG ‚öôÔ∏è
local CONFIG = {
    AutoCollect = false,            -- ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡∏à‡∏∞‡∏£‡∏±‡∏ô‡∏•‡∏π‡∏õ‡∏≠‡∏≠‡πÇ‡∏ï‡πâ üîÑ
    DebugCollect = false,           -- ‡πÅ‡∏™‡∏î‡∏á log debug üñ•Ô∏è (‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πá‡∏ô true ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ä‡πà‡∏ß‡∏¢ Debug)
    ShowStatusTable = false,       -- ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏∏‡∏Å 3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ üìú
    MainLoopInterval = 1,          -- ‡∏´‡∏ô‡πà‡∏ß‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏£‡∏≠‡∏ö‡∏´‡∏•‡∏±‡∏Å (‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ) ‚è±Ô∏è
    PositionThreshold = 5,        -- ‡∏£‡∏∞‡∏¢‡∏∞‡∏¢‡∏≠‡∏°‡∏Ñ‡∏•‡∏≤‡∏î‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô (studs) ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å 5 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô üìè
    StrictPositionCheck = true,    -- ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ ClickDetector ‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏¢‡∏∞ PositionThreshold ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
    FallbackTryAll = false,        -- ‡∏•‡∏≠‡∏á‡∏¢‡∏¥‡∏á‡∏ó‡∏∏‡∏Å ClickDetector ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ (‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á!) ‚ö†Ô∏è
    SwitchTeamIfNeeded = true,     -- ‡∏™‡∏•‡∏±‡∏ö‡∏ó‡∏µ‡∏°‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ üö®
    MaxAttemptsPerItem = 3,        -- ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏•‡∏≠‡∏á‡πÄ‡∏Å‡πá‡∏ö‡∏ï‡πà‡∏≠‡πÑ‡∏≠‡πÄ‡∏ó‡∏° üîÅ
    TeamSwitchDelay = 1.5,         -- ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏•‡∏±‡∏á‡∏™‡∏•‡∏±‡∏ö‡∏ó‡∏µ‡∏° (‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ) ‚è≤Ô∏è
    TeamSwitchMaxRetries = 3,      -- ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏•‡∏≠‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ó‡∏µ‡∏° üîÑ
    TeamSwitchRetryDelay = 0.5,    -- ‡∏´‡∏ô‡πà‡∏ß‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà (‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ) ‚è≥
    CharacterLoadTimeout = 5,      -- ‡∏£‡∏≠‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î (‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ) ‚è≥
    CheckInventoryInterval = 5,    -- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Inventory ‡∏ó‡∏∏‡∏Å X ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡∏£‡∏ö üì¶
    FastCollect = true            -- ‡πÇ‡∏´‡∏°‡∏î‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡πá‡∏ß (‡∏¢‡∏¥‡∏á‡∏ó‡∏∏‡∏Å ClickDetector ‡∏ó‡∏µ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß) ‚ö°
}

-- SERVICES üåê
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local Teams = game:GetService("Teams")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")

-- STATE üß†
local Character = LocalPlayer.Character
local HRP = Character and Character:WaitForChild("HumanoidRootPart", CONFIG.CharacterLoadTimeout)
local running = false
local lastAttemptTimes = {} -- ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏•‡∏≠‡∏á‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÑ‡∏≠‡πÄ‡∏ó‡∏° ‚è∞
local allItemsCollected = false -- ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ß‡πà‡∏≤‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡∏£‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ‚úÖ

-- ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà (‡∏õ‡∏£‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ï‡∏≤‡∏°‡∏à‡∏£‡∏¥‡∏á‡πÑ‡∏î‡πâ) üìã
local DrinkTargets = {
    { Name = "Bloxy Soda", Method = "fireclickdetector", Data = Vector3.new(-16.6033745, 176.402084, 238.670059), Collected = false, RequiredTeam = "Citizen" }
}

local FoodTargets = {
    { Name = "Tom Yum Kung", Method = "fireclickdetector", Data = Vector3.new(-20.3787384, 176.47052, 238.670151), Collected = false, RequiredTeam = "Citizen" },
    { Name = "Somtum", Method = "fireclickdetector", Data = Vector3.new(-24.717041, 176.47052, 238.670181), Collected = false, RequiredTeam = "Citizen" },
    { Name = "Fried Rice", Method = "fireclickdetector", Data = Vector3.new(-29.7084618, 176.47052, 238.670105), Collected = false, RequiredTeam = "Citizen" },
    { Name = "Grilled Fish Veg & Peppers", Method = "fireclickdetector", Data = Vector3.new(-34.7852478, 176.47052, 238.670105), Collected = false, RequiredTeam = "Citizen" },
    { Name = "Bok Choy Oyster Sauce", Method = "fireclickdetector", Data = Vector3.new(-39.5275421, 176.47052, 238.670135), Collected = false, RequiredTeam = "Citizen" }
}

local OtherTargets = {
    { Name = "Handcuff", Method = "fireclickdetector", Data = Vector3.new(164.228638, 177.92601, 250.528137), Collected = false, RequiredTeam = "Police" },
    { Name = "M4", Method = "fireclickdetector", Data = Vector3.new(420.693115, 167.687271, 253.479202), Collected = false, RequiredTeam = "Citizen" },
    { Name = "Boombox", Method = "fireclickdetector", Data = Vector3.new(89.4352951, 176.4534, 256.519592), Collected = false, RequiredTeam = "Citizen" }
}

-- ‡∏£‡∏ß‡∏°‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô üìö
local CollectTargets = {}
for _, t in ipairs(DrinkTargets) do table.insert(CollectTargets, t) end
for _, t in ipairs(FoodTargets) do table.insert(CollectTargets, t) end
for _, t in ipairs(OtherTargets) do table.insert(CollectTargets, t) end

-- UTILITY üõ†Ô∏è
local function debugPrint(...)
    if CONFIG.DebugCollect then
        print("[AutoCollect V2.4] üöÄ", ...)
    end
end

local function hasItem(name)
    if not name then return false end
    local ok, found = pcall(function()
        return LocalPlayer.Backpack:FindFirstChild(name)
            or (Character and Character:FindFirstChild(name))
            or LocalPlayer.PlayerGui:FindFirstChild(name)
    end)
    return ok and (found ~= nil)
end

local function checkAllItemsCollected()
    for _, target in ipairs(CollectTargets) do
        if not hasItem(target.Name) and not target.Collected then
            return false
        end
    end
    return true
end

local function updateCharacter(newChar)
    Character = newChar
    HRP = Character and Character:WaitForChild("HumanoidRootPart", CONFIG.CharacterLoadTimeout) or nil
    if not HRP then
        debugPrint("Character load timeout! HRP is nil üòµ")
        return
    end
    -- ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Collected ‡πÅ‡∏•‡∏∞ lastAttemptTimes
    for _, t in ipairs(CollectTargets) do
        t.Collected = false
        lastAttemptTimes[t.Name] = nil
    end
    allItemsCollected = false
    debugPrint("Character updated, HRP:", HRP and "ready" or "nil", "AutoCollect will restart! üöÄ")
    if CONFIG.AutoCollect then
        local ok, err = pcall(function()
            coroutine.wrap(AutoCollectLoop)()
        end)
        if not ok then
            debugPrint("Failed to start AutoCollectLoop:", err, "üî¥")
        end
    end
end

local function findClickDetectorNearPosition(pos, threshold)
    threshold = threshold or CONFIG.PositionThreshold
    local best = nil
    local bestDist = math.huge
    for _, obj in ipairs(workspace:GetDescendants()) do
        if obj:IsA("ClickDetector") and obj.Parent then
            local parentPos = obj.Parent:IsA("BasePart") and obj.Parent.Position
                or (obj.Parent:IsA("Model") and obj.Parent:GetPivot().Position)
            if parentPos then
                local d = (parentPos - pos).Magnitude
                if d <= threshold and d < bestDist then
                    best = obj
                    bestDist = d
                end
            end
        end
    end
    if best then
        debugPrint("Found ClickDetector at distance:", bestDist, "for position:", pos)
    else
        debugPrint("No ClickDetector found within", threshold, "studs of position:", pos)
    end
    return best
end

local function findClickDetectorByParentName(name)
    if not name then return nil end
    for _, obj in ipairs(workspace:GetDescendants()) do
        if obj:IsA("ClickDetector") and obj.Parent and obj.Parent.Name == name then
            debugPrint("Found ClickDetector by parent name:", name)
            return obj
        end
    end
    debugPrint("No ClickDetector found by parent name:", name)
    return nil
end

local function safeFireClick(detector)
    if not detector then
        debugPrint("No detector provided to safeFireClick! üö´")
        return false
    end
    local success, err = pcall(function()
        fireclickdetector(detector)
    end)
    if not success then
        debugPrint("fireclickdetector error:", err, "üî¥")
    else
        debugPrint("Successfully fired ClickDetector! ‚úÖ")
    end
    return success
end

local function switchToTeam(teamName)
    if not CONFIG.SwitchTeamIfNeeded then return false end
    if not teamName then
        debugPrint("No team name provided! üö´")
        return false
    end
    local currentTeam = LocalPlayer.Team
    local targetTeam = Teams:FindFirstChild(teamName)
    if not targetTeam then
        debugPrint("Team", teamName, "not found! üö´")
        return false
    end
    if currentTeam == targetTeam then
        debugPrint("Already on", teamName, "team! ‚úÖ")
        return true
    end

    debugPrint("Switching to", teamName, "team... üö®")
    local attempts = 0
    while attempts < CONFIG.TeamSwitchMaxRetries do
        local ok, err = pcall(function()
            ReplicatedStorage.ChangeTeam:FireServer(teamName)
        end)
        if ok then
            task.wait(CONFIG.TeamSwitchDelay + math.random(0.1, 0.3))
            if LocalPlayer.Team == targetTeam then
                debugPrint("Successfully switched to", teamName, "team! ‚úÖ")
                return true
            else
                debugPrint("Team switch failed, retrying... (Attempt", attempts + 1, ") üîÑ")
                attempts = attempts + 1
                task.wait(CONFIG.TeamSwitchRetryDelay)
            end
        else
            debugPrint("ChangeTeam error:", err, "Retrying... üîÑ")
            attempts = attempts + 1
            task.wait(CONFIG.TeamSwitchRetryDelay)
        end
    end
    debugPrint("Failed to switch to", teamName, "after", CONFIG.TeamSwitchMaxRetries, "attempts! üö´")
    return false
end

local function CollectFast()
    debugPrint("Starting FastCollect mode... ‚ö°")
    local teamGroups = {}
    for _, target in ipairs(CollectTargets) do
        if not hasItem(target.Name) and not target.Collected then
            local team = target.RequiredTeam or "None"
            teamGroups[team] = teamGroups[team] or {}
            table.insert(teamGroups[team], target)
        end
    end

    for team, targets in pairs(teamGroups) do
        if team ~= "None" then
            if not switchToTeam(team) then
                debugPrint("Failed to switch to team", team, "skipping items... üö´")
                continue
            end
        end
        local detectors = {}
        for _, target in ipairs(targets) do
            if target.Data and typeof(target.Data) == "Vector3" then
                local det = findClickDetectorNearPosition(target.Data)
                if det then
                    table.insert(detectors, { Detector = det, Name = target.Name })
                elseif CONFIG.StrictPositionCheck then
                    debugPrint("Skipping", target.Name, "due to strict position check failure üö´")
                    continue
                end
            end
            if not detectors[1] then
                local nameKey = (target.Data and typeof(target.Data) == "string") and target.Data or target.Name
                local detByName = findClickDetectorByParentName(nameKey)
                if detByName then
                    table.insert(detectors, { Detector = detByName, Name = target.Name })
                elseif CONFIG.StrictPositionCheck then
                    debugPrint("Skipping", target.Name, "due to no ClickDetector by name üö´")
                    continue
                end
            end
        end
        for _, detInfo in ipairs(detectors) do
            if safeFireClick(detInfo.Detector) then
                task.wait(math.random(0.1, 0.2))
                if hasItem(detInfo.Name) then
                    for _, t in ipairs(targets) do
                        if t.Name == detInfo.Name then
                            t.Collected = true
                            debugPrint(("[%s] collected in FastCollect mode ‚úÖ"):format(detInfo.Name))
                            break
                        end
                    end
                end
            end
        end
    end

    if CONFIG.FallbackTryAll then
        debugPrint("Fallback: firing all ClickDetectors... ‚ö†Ô∏è")
        for _, obj in ipairs(workspace:GetDescendants()) do
            if obj:IsA("ClickDetector") and obj.Parent then
                safeFireClick(obj)
                task.wait(math.random(0.05, 0.1))
                for _, target in ipairs(CollectTargets) do
                    if hasItem(target.Name) then
                        target.Collected = true
                        debugPrint(("[%s] collected during fallback sweep ‚úÖ"):format(target.Name))
                    end
                end
            end
        end
    end

    allItemsCollected = checkAllItemsCollected()
    if allItemsCollected then
        debugPrint("All items collected in FastCollect mode! Stopping AutoCollect until items missing. üéâ")
    end
end

local function CollectItemByName(itemName)
    for _, target in ipairs(CollectTargets) do
        if target.Name == itemName then
            if hasItem(target.Name) then
                target.Collected = true
                debugPrint(("[%s] already in inventory ‚úÖ"):format(itemName))
                return true
            end

            lastAttemptTimes[itemName] = lastAttemptTimes[itemName] or 0
            if lastAttemptTimes[itemName] >= CONFIG.MaxAttemptsPerItem then
                debugPrint(("[%s] max attempts reached, skipping üî¥"):format(itemName))
                return false
            end
            lastAttemptTimes[itemName] = lastAttemptTimes[itemName] + 1

            if target.RequiredTeam and not switchToTeam(target.RequiredTeam) then
                debugPrint(("[%s] requires %s team, failed to switch üö´"):format(itemName, target.RequiredTeam))
                return false
            end

            local success = false
            if target.Data and typeof(target.Data) == "Vector3" then
                local det = findClickDetectorNearPosition(target.Data)
                if det then
                    debugPrint("Found ClickDetector by position for", itemName, "-> firing üî´")
                    success = safeFireClick(det)
                    task.wait(math.random(0.15, 0.25))
                    if success and hasItem(itemName) then
                        target.Collected = true
                        debugPrint(("[%s] collected after position click ‚úÖ"):format(itemName))
                        return true
                    end
                elseif CONFIG.StrictPositionCheck then
                    debugPrint("No ClickDetector found near position for", itemName, "skipping due to strict check üö´")
                    return false
                else
                    debugPrint("No ClickDetector found near position for", itemName)
                end
            end

            if not success then
                local nameKey = (target.Data and typeof(target.Data) == "string") and target.Data or target.Name
                local detByName = findClickDetectorByParentName(nameKey)
                if detByName then
                    debugPrint("Found ClickDetector by parent name for", itemName, "-> firing üî´")
                    success = safeFireClick(detByName)
                    task.wait(math.random(0.15, 0.25))
                    if success and hasItem(itemName) then
                        target.Collected = true
                        debugPrint(("[%s] collected after name click ‚úÖ"):format(itemName))
                        return true
                    end
                elseif CONFIG.StrictPositionCheck then
                    debugPrint("No ClickDetector found by parent name for", itemName, "skipping due to strict check üö´")
                    return false
                else
                    debugPrint("No ClickDetector found by parent name for", itemName)
                end
            end

            if not success and CONFIG.FallbackTryAll then
                debugPrint("Fallback: firing all ClickDetectors for", itemName, "‚ö†Ô∏è")
                for _, obj in ipairs(workspace:GetDescendants()) do
                    if obj:IsA("ClickDetector") and obj.Parent then
                        safeFireClick(obj)
                        task.wait(math.random(0.05, 0.1))
                        if hasItem(itemName) then
                            target.Collected = true
                            debugPrint(("[%s] collected during fallback sweep ‚úÖ"):format(itemName))
                            return true
                        end
                    end
                end
            end

            target.Collected = hasItem(itemName)
            debugPrint(("[%s] collect attempt finished. success: %s"):format(itemName, tostring(target.Collected)))
            return target.Collected
        end
    end
    debugPrint("CollectItemByName: target not found in table:", itemName, "üî¥")
    return false
end

local function CollectAllOnce()
    if CONFIG.FastCollect then
        CollectFast()
    else
        for _, target in ipairs(CollectTargets) do
            if not hasItem(target.Name) and not target.Collected then
                CollectItemByName(target.Name)
            else
                target.Collected = true
            end
        end
        allItemsCollected = checkAllItemsCollected()
        if allItemsCollected then
            debugPrint("All items collected! Stopping AutoCollect until respawn or items missing. üéâ")
        end
    end
end

local function AutoCollectLoop()
    if running then return end
    running = true
    while CONFIG.AutoCollect and not allItemsCollected do
        if not Character or not HRP then
            debugPrint("Waiting for character/HRP... ‚è≥")
            task.wait(0.5)
        else
            local ok, err = pcall(CollectAllOnce)
            if not ok then
                debugPrint("CollectAllOnce error:", err, "üî¥")
            end
            task.wait(CONFIG.MainLoopInterval)
        end
    end
    running = false
    if allItemsCollected then
        debugPrint("Entering inventory check mode... üì¶")
        while CONFIG.AutoCollect do
            task.wait(CONFIG.CheckInventoryInterval)
            if not checkAllItemsCollected() then
                debugPrint("Items missing! Restarting AutoCollect... üöÄ")
                allItemsCollected = false
                local ok, err = pcall(function()
                    coroutine.wrap(AutoCollectLoop)()
                end)
                if not ok then
                    debugPrint("Failed to restart AutoCollectLoop:", err, "üî¥")
                end
                break
            end
        end
    end
end

local function StartStatusPrinter()
    if not CONFIG.ShowStatusTable then return end
    local ok, err = pcall(function()
        while CONFIG.AutoCollect do
            task.wait(3)
            print("==== AutoCollect Status üìä ====")
            for _, t in ipairs(CollectTargets) do
                print(("- %s | Collected: %s | Attempts: %d | Method: %s | Data: %s | RequiredTeam: %s")
                    :format(t.Name, tostring(t.Collected), lastAttemptTimes[t.Name] or 0, tostring(t.Method), tostring(t.Data), tostring(t.RequiredTeam or "None")))
            end
            print("All Items Collected:", allItemsCollected and "Yes üéâ" or "No ‚è≥")
            print("FastCollect Mode:", CONFIG.FastCollect and "Enabled ‚ö°" or "Disabled")
            print("==============================")
        end
    end)
    if not ok then
        debugPrint("StartStatusPrinter error:", err, "üî¥")
    end
end

-- INIT & listeners (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡∏¥‡∏î‡πÉ‡∏´‡∏°‡πà) üéÆ
if Character then
    updateCharacter(Character)
else
    LocalPlayer.CharacterAdded:Wait()
    updateCharacter(LocalPlayer.Character)
end

LocalPlayer.CharacterAdded:Connect(function(char)
    local ok, err = pcall(function()
        updateCharacter(char)
    end)
    if not ok then
        debugPrint("CharacterAdded error:", err, "üî¥")
    end
end)

LocalPlayer.CharacterRemoving:Connect(function()
    HRP = nil
    debugPrint("Character removed, waiting for respawn... üíÄ")
end)

if CONFIG.AutoCollect then
    local ok, err = pcall(function()
        coroutine.wrap(AutoCollectLoop)()
        StartStatusPrinter()
    end)
    if not ok then
        debugPrint("Initial AutoCollect error:", err, "üî¥")
    end
end

-- API ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å üì°
_G.AutoCollectModule = {
    CollectItemByName = CollectItemByName,
    CollectAllOnce = CollectAllOnce,
    GetTargets = function() return CollectTargets end,
    SetAutoCollect = function(v)
        CONFIG.AutoCollect = v
        if v and not allItemsCollected then
            local ok, err = pcall(function()
                coroutine.wrap(AutoCollectLoop)()
            end)
            if not ok then
                debugPrint("SetAutoCollect error:", err, "üî¥")
            end
        end
    end,
    IsAllCollected = function() return allItemsCollected end,
    SwitchToTeam = switchToTeam,
    SetFastCollect = function(v) CONFIG.FastCollect = v end
}

debugPrint("AutoCollect module loaded. AutoCollect =", CONFIG.AutoCollect, "FastCollect =", CONFIG.FastCollect, "üöÄ")
